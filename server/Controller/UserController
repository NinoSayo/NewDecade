using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Project3.IServices;
using Project3.Models;
using Project3.Services;

namespace Project3.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserRepo userRepo;

        public UserController(IUserRepo userRepo)
        {
            this.userRepo = userRepo;
        }

        [AllowAnonymous]
        [HttpPost("login")]
        public async Task<ActionResult> Login(UserLogin userLogin)
        {
            try
            {
                var user = await userRepo.Authenticate(userLogin);
                if (user != null)
                {
                    var token = userRepo.GenerateToken(user);
                    Response.Cookies.Append("accessToken", token.Result, new CookieOptions
                    {
                        HttpOnly = true,
                        Secure = true,
                        SameSite = SameSiteMode.None,
                        Expires = DateTime.UtcNow.AddMinutes(50)
                    });
                    return Ok(new { userLogin.UserName });
                }

                return Unauthorized("Login failed. Invalid credentials.");
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("createUser")]
        public async Task<ActionResult> Create(User user)
        {
            try
            {
                var result = await userRepo.CreateUser(user);
                return Ok(result);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("confirmEmail/{userId}/{confirmationCode}")]
        public async Task<ActionResult> ComfirmEmail(int userId, string confirmationCode)
        {
            try
            {
                var result = await userRepo.ConfirmEmail(userId, confirmationCode);
                return Ok(result);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("editUser")]
        [Authorize]
        public async Task<ActionResult> EditUser(User user)
        {
            try
            {
                var result = await userRepo.EditUser(user);
                return Ok(result); 
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpDelete("deleteUser/{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult> DeleteUser(int id)
        {
            try
            {
                var result = await userRepo.DeleteUser(id);
                return Ok(result);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("forgotPassword/{username}/{password}")]
        [Authorize]
        public async Task<ActionResult> ForgotPassword(string username, string password)
        {
            try
            {
                var result = await userRepo.ForgotPassword(username, password);
                return Ok(result);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("searchUser/{username}")]
        public async Task<ActionResult> SearchUser(string username)
        {
            try
            {
                var result = await userRepo.SearchUser(username);
                if(result != null)
                {
                    return Ok(result);
                }
                return NotFound();
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("getAllUsers")]
        public async Task<ActionResult> GetAllUsers()
        {
            try
            {
                var list = await userRepo.GetAllUsers();
                return Ok(list);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("logout/{id}")]
        public async Task<ActionResult> Logout(int id)
        {
            try
            {
                var result = await userRepo.Logout(id);
                return Ok(result);
            }
            catch(Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("getUserById/{id}")]
        public async Task<ActionResult> GetUserById(int id)
        {
            try
            {
                var result = await userRepo.GetUserById(id);
                return Ok(result);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("uploadAvatar/{userId}")]
        [Authorize]
        public async Task<IActionResult> UploadAvatar(int userId, [FromForm] IFormFile avatarFile)
        {
            var result = await userRepo.UploadAvatar(userId, avatarFile);
            if (result)
            {
                return Ok(new { message = "Avatar updated successfully" });
            }
            return BadRequest(new { message = "Failed to update avatar" });
        }

        [HttpGet("getUser/{username}")]
        [Authorize]
        public async Task<ActionResult> GetUser(string username)
        {
            try
            {
                var result = await userRepo.GetUserByUsername(username);
                if (result != null)
                {
                    return Ok(result);
                }
                return NotFound();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
    }
}
