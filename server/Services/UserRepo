using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Project3.Data;
using Project3.IServices;
using Project3.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Net.Mail;
using System.Net;
using System.Security.Claims;
using System.Text;

namespace Project3.Services
{
    public class UserRepo : IUserRepo
    {
        private readonly DatabaseContext db;
        private readonly IConfiguration configuration; 

        public UserRepo(DatabaseContext db, IConfiguration configuration)
        {
            this.db = db;
            this.configuration = configuration;
        }

        public async Task<User> Authenticate(UserLogin userLogin)
        {
            try
            {
                var currentUser = await db.Users.SingleOrDefaultAsync(u => u.UserName.ToLower() == userLogin.UserName || u.Email.ToLower() == userLogin.UserName);
                if (currentUser != null && BCrypt.Net.BCrypt.Verify(userLogin.Password, currentUser.Password))
                {
                    return currentUser;
                }
                return null;
            }
            catch
            {
                return null;
            }
        }

        public async Task<bool> ConfirmEmail(int userId, string confirmationCode)
        {
            try
            {
                var user = await GetUserById(userId);

                if (user != null && user.ConfirmationCode == confirmationCode)
                {
                    user.IsConfirmed = true;
                    db.Users.Update(user);
                    await db.SaveChangesAsync();
                    return true;
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        public async Task<User> CreateUser(User user)
        {
            try
            {
                user.Role = "User";
                user.Password = BCrypt.Net.BCrypt.HashPassword(user.Password);
                user.RegisterTime = DateTime.Now;
                user.IsOnline = true;
                user.Avatar = "";
                string confirmationCode = GenerateRandomCode();
                user.ConfirmationCode = confirmationCode;
                user.IsConfirmed = false;
                SendConfirmationEmail(user.Email, confirmationCode);
                db.Users.Add(user);
                await db.SaveChangesAsync();
                return user;
            }
            catch
            {
                return null;
            }
        }

        public async Task<bool> DeleteUser(int id)
        {
            try
            {
                var user = await GetUserById(id);
                db.Users.Remove(user);
                await db.SaveChangesAsync();
                return true;
            }
            catch
            {
                return false;
            }
        }

        public async Task<User> EditUser(User user)
        {
            try
            {
                var oldUser = await GetUserById(user.UserId);
                oldUser.UserName = user.UserName;
                oldUser.Email = user.Email;
                oldUser.Phone = user.Phone;
                oldUser.Address = user.Address;
                oldUser.Avatar = user.Avatar;
                db.Users.Update(user);
                await db.SaveChangesAsync();
                return user;
            }
            catch
            {
                return null;
            }
        }

        public async Task<User> ForgotPassword(string username, string password)
        {
            try
            {
                var user = await db.Users.SingleOrDefaultAsync(u => u.UserName == username);
                if(user == null)
                {
                    return null;
                }
                user.Password = password;
                db.Users.Update(user);
                await db.SaveChangesAsync();
                return user;
            }
            catch
            {
                return null;
            }
        }

        public async Task<string> GenerateToken(User user)
        {
            try
            {
                var securiryKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["Jwt:Key"]));
                var credential = new SigningCredentials(securiryKey, SecurityAlgorithms.HmacSha256);
                var claims = new[]
                {
                    new Claim("UserId", user.UserId.ToString()),
                    new Claim(ClaimTypes.Role, user.Role)
                };
                var token = new JwtSecurityToken(configuration["Jwt:Issuer"], configuration["Jwt:Audience"], claims, expires: DateTime.Now.AddMinutes(50),
                    signingCredentials: credential);
                return new JwtSecurityTokenHandler().WriteToken(token);
            }
            catch
            {
                return null;
            }
        }

        public async Task<IEnumerable<User>> GetAllUsers()
        {
            try
            {
                var listUser = await db.Users.Where(u => u.Role == "User").ToListAsync();
                return listUser;
            }
            catch
            {
                return null;
            }
        }

        public async Task<User> GetUserById(int id)
        {
            try
            {
                var user = await db.Users.SingleOrDefaultAsync(u => u.UserId == id);
                return user;
            }
            catch
            {
                return null;
            }
        }

        public async Task<IEnumerable<User>> SearchUser(string username)
        {
            try
            {
                var users = await db.Users.Where(u => u.UserName.Contains(username)).ToListAsync();
                return users;
            }
            catch
            {
                return null;
            }
        }

        public async Task<User> Logout(int id)
        {
            try
            {
                var user = await GetUserById(id);
                user.IsOnline = false;
                db.Users.Update(user);
                await db.SaveChangesAsync();
                return user;
            }
            catch
            {
                return null;
            }
        }

        public async Task<bool> UploadAvatar(int userId, IFormFile avatarFile)
        {
            try
            {
                var user = await GetUserById(userId);
                if (user != null && avatarFile != null)
                {
                    // Lưu file vật lý
                    string uploadsFolder = Path.Combine("Images"); // Thay đổi đường dẫn tùy thuộc vào cấu trúc thư mục của bạn
                    string uniqueFileName = Guid.NewGuid().ToString() + "_" + avatarFile.FileName;
                    string filePath = Path.Combine(uploadsFolder, uniqueFileName);
                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await avatarFile.CopyToAsync(fileStream);
                    }

                    // Cập nhật đường dẫn avatar trong cơ sở dữ liệu
                    user.Avatar = uniqueFileName;
                    db.Users.Update(user);
                    await db.SaveChangesAsync();
                    return true;
                }
                return false;
            }
            catch
            {
                return false;
            }
        }

        private string GenerateRandomCode()
        {
            Random random = new Random();
            int code = random.Next(100000, 999999);
            return code.ToString();
        }

        private void SendConfirmationEmail(string toEmail, string confirmationCode)
        {
            using (MailMessage mail = new MailMessage())
            {
                mail.From = new MailAddress("minhtri120604@gmail.com");
                mail.To.Add(toEmail);
                mail.Subject = "Hello we are Online Laundry, this is the email to confirm your email account.";
                mail.Body = $"Your confirmation code is: {confirmationCode}";

                using (SmtpClient smtp = new SmtpClient("smtp.gmail.com"))
                {
                    smtp.Port = 587;
                    smtp.Credentials = new NetworkCredential("minhtri120604@gmail.com", "unvp qvvg sfso yiik");
                    smtp.EnableSsl = true;
                    smtp.Send(mail);
                }
            }
        }

        public async Task<User> GetUserByUsername(string username)
        {
            try
            {
                var user = await db.Users.SingleOrDefaultAsync(u => u.UserName == username);
                return user;
            }
            catch
            {
                return null;
            }
        }
    }
}
